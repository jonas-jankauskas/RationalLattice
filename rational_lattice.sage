"""
    rational_lattice.sage: SAGE code for the class that implements lattices generated by rational vectors in Q^n over Z. Given a collection of m, 1 <= m <= n,  linearly independent vectors S={v_1, v_2, ... v_m} of Q^n, a lattice L spanned by S over Z is the set L = Z*v_1 + ... Z*v_m. It consists of all possible linear combinations c_1*v_1+c_2*v_2 ... c_n*v_m of generating vectors, where the coefficients c_i are integers.
    __author__     = Jonas Jankauskas
    __copyright__  = "Copyright 2022, Jonas Jankauskas, all rights reserved"
    __license__    = "LGPLv3"
    __version__    = "0.1 beta"
    __maintainer__ ="Jonas Jankauskas"
    __email__      = jonas.jankauskas@gmail.com
    __status__     = "In development"
"""

class RationalLattice:
    """
        Constructs a rational lattice
        Arguments
        - base_matrix - rational or integer matrix or any SAGE matrix with entries that can be type-cast to rational numbers.
        Returns
        - an object of  RationalLattice class type
    """
    def __init__(self):

        return None
    
    """
        Calculates Z^n intersection with MZ^n (the maximal integral sublattice of MZ^n)
        Arguments:
            L - rational matrix
        Returns
            L - basis matrix of Z^n intersection LZ^n
    """
    
    def intsub(self, L):

        return self.intersect(L, L.denominator()*identity_matrix(L.nrows()))

    """
        Calculates the sum lattice KZ^n + LZ^n
        Arguments:
            K, L - rational basis matrices of two rational lattices
        Returns:
            M - rational basis matrix such that MZ^n = KZ^n union LZ^n
    """

    def add(self,K,L):

        augM = K.augment(L)
        cden = augM.denominator()
        auxM = matrix(ZZ,cden*augM)
        S,U,V = auxM.smith_form()
        return U.det()*U.adjugate()*S[:,:S.rank()]/cden

    """
        Computes the dual lattice L* of L
        Arguments:
            L - rational basis matrix of a lattice
        Returns:
            M - basis matrix of a lattice L*, such that L* = MZ^n
    """

    def dual(self,L):

        return L*(L.transpose()*L).inverse()

    """
        Computes intersection of lattices KZ^n and LZ^n
        Arguments:
            K, L - rational basis matrices of two rational lattices
        Returns:
            M - rational basis matrix such that MZ^n = KZ^n intersection LZ^n
    """

    def intersect(self,K, L):

        return self.dual(self.add(self.dual(K),self.dual(L)))